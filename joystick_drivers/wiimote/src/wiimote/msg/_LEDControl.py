"""autogenerated by genmsg_py from LEDControl.msg. Do not edit."""
import roslib.message
import struct

import wiimote.msg

class LEDControl(roslib.message.Message):
  _md5sum = "d0477eee2c164b8a9582a596f92c6f08"
  _type = "wiimote/LEDControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Message to request Wiimote LED operations. The Wiimote has four
# LEDs. This message enables its user to turn each individual LED
# on or off, and to define a blink pattern for each LEDs.
#        See TimedSwitch.msg for details.

TimedSwitch[] timed_switch_array  

================================================================================
MSG: wiimote/TimedSwitch
# TimedSwitch allows sender to:
#    o turn a switch on,
#    o turn a switch off, and
#    o repeat an on/off pattern forever or for a
#          given number of times.
# Fields (refer to definitions of constants in the definition body):
#     o switch_mode:
#         ON: turn on  (num_cycles and pulse_pattern fields are ignored)
#        OFF: turn off (num_cycles and pulse_pattern fields are ignored)
#  NO_CHANGE: leave LED in its current state
#     REPEAT: repeat an on/off pattern for as long
#             as is indicated in the num_cycles field. The
#             pattern is defined in the pulse_pattern field.
#
#     o num_cycles:
#          n>=0: run the pattern that is defined in pulse_pattern
#                n times.
#          n==FOREVER: run the pattern that is defined in pulse_pattern
#                       until a new TimedSwitch message is sent.              
#
#     o pulse_pattern:
#          A series of time durations in fractions of a second. The
#          first number is the duration for having the switch on.
#          The second number is the duration for which the switch
#          is off. The third is an 'on' period again, etc.
#          A pattern is terminated with the end of the array.
#           
#          Example: [1,1] specifies an on-off sequence of 1 second.               

int8 ON        =  1
int8 OFF       =  0
int8 NO_CHANGE = -2
int8 REPEAT    = -1
int8 FOREVER   = -1

int8 switch_mode
int32 num_cycles
float32[] pulse_pattern

"""
  __slots__ = ['timed_switch_array']
  _slot_types = ['wiimote/TimedSwitch[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       timed_switch_array
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(LEDControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timed_switch_array is None:
        self.timed_switch_array = []
    else:
      self.timed_switch_array = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.timed_switch_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.timed_switch_array:
        _x = val1
        buff.write(_struct_bi.pack(_x.switch_mode, _x.num_cycles))
        length = len(val1.pulse_pattern)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.pulse_pattern))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.timed_switch_array = []
      for i in range(0, length):
        val1 = wiimote.msg.TimedSwitch()
        _x = val1
        start = end
        end += 5
        (_x.switch_mode, _x.num_cycles,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pulse_pattern = struct.unpack(pattern, str[start:end])
        self.timed_switch_array.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.timed_switch_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.timed_switch_array:
        _x = val1
        buff.write(_struct_bi.pack(_x.switch_mode, _x.num_cycles))
        length = len(val1.pulse_pattern)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.pulse_pattern.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.timed_switch_array = []
      for i in range(0, length):
        val1 = wiimote.msg.TimedSwitch()
        _x = val1
        start = end
        end += 5
        (_x.switch_mode, _x.num_cycles,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pulse_pattern = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.timed_switch_array.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_bi = struct.Struct("<bi")
