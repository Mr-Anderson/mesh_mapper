/* Auto-generated by genmsg_cpp for file /home/robot/Code/trunk/wiimote/msg/TimedSwitch.msg */
#ifndef WIIMOTE_MESSAGE_TIMEDSWITCH_H
#define WIIMOTE_MESSAGE_TIMEDSWITCH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wiimote
{
template <class ContainerAllocator>
struct TimedSwitch_ {
  typedef TimedSwitch_<ContainerAllocator> Type;

  TimedSwitch_()
  : switch_mode(0)
  , num_cycles(0)
  , pulse_pattern()
  {
  }

  TimedSwitch_(const ContainerAllocator& _alloc)
  : switch_mode(0)
  , num_cycles(0)
  , pulse_pattern(_alloc)
  {
  }

  typedef int8_t _switch_mode_type;
  int8_t switch_mode;

  typedef int32_t _num_cycles_type;
  int32_t num_cycles;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pulse_pattern_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  pulse_pattern;

  enum { ON = 1 };
  enum { OFF = 0 };
  enum { NO_CHANGE = -2 };
  enum { REPEAT = -1 };
  enum { FOREVER = -1 };

  ROS_DEPRECATED uint32_t get_pulse_pattern_size() const { return (uint32_t)pulse_pattern.size(); }
  ROS_DEPRECATED void set_pulse_pattern_size(uint32_t size) { pulse_pattern.resize((size_t)size); }
  ROS_DEPRECATED void get_pulse_pattern_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->pulse_pattern; }
  ROS_DEPRECATED void set_pulse_pattern_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->pulse_pattern = vec; }
private:
  static const char* __s_getDataType_() { return "wiimote/TimedSwitch"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e4c8d9327409cef6066fa6c368032c1e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# TimedSwitch allows sender to:\n\
#    o turn a switch on,\n\
#    o turn a switch off, and\n\
#    o repeat an on/off pattern forever or for a\n\
#          given number of times.\n\
# Fields (refer to definitions of constants in the definition body):\n\
#     o switch_mode:\n\
#         ON: turn on  (num_cycles and pulse_pattern fields are ignored)\n\
#        OFF: turn off (num_cycles and pulse_pattern fields are ignored)\n\
#  NO_CHANGE: leave LED in its current state\n\
#     REPEAT: repeat an on/off pattern for as long\n\
#             as is indicated in the num_cycles field. The\n\
#             pattern is defined in the pulse_pattern field.\n\
#\n\
#     o num_cycles:\n\
#          n>=0: run the pattern that is defined in pulse_pattern\n\
#                n times.\n\
#          n==FOREVER: run the pattern that is defined in pulse_pattern\n\
#                       until a new TimedSwitch message is sent.              \n\
#\n\
#     o pulse_pattern:\n\
#          A series of time durations in fractions of a second. The\n\
#          first number is the duration for having the switch on.\n\
#          The second number is the duration for which the switch\n\
#          is off. The third is an 'on' period again, etc.\n\
#          A pattern is terminated with the end of the array.\n\
#           \n\
#          Example: [1,1] specifies an on-off sequence of 1 second.               \n\
\n\
int8 ON        =  1\n\
int8 OFF       =  0\n\
int8 NO_CHANGE = -2\n\
int8 REPEAT    = -1\n\
int8 FOREVER   = -1\n\
\n\
int8 switch_mode\n\
int32 num_cycles\n\
float32[] pulse_pattern\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, switch_mode);
    ros::serialization::serialize(stream, num_cycles);
    ros::serialization::serialize(stream, pulse_pattern);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, switch_mode);
    ros::serialization::deserialize(stream, num_cycles);
    ros::serialization::deserialize(stream, pulse_pattern);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(switch_mode);
    size += ros::serialization::serializationLength(num_cycles);
    size += ros::serialization::serializationLength(pulse_pattern);
    return size;
  }

  typedef boost::shared_ptr< ::wiimote::TimedSwitch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wiimote::TimedSwitch_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TimedSwitch
typedef  ::wiimote::TimedSwitch_<std::allocator<void> > TimedSwitch;

typedef boost::shared_ptr< ::wiimote::TimedSwitch> TimedSwitchPtr;
typedef boost::shared_ptr< ::wiimote::TimedSwitch const> TimedSwitchConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wiimote::TimedSwitch_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wiimote::TimedSwitch_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wiimote

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wiimote::TimedSwitch_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wiimote::TimedSwitch_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wiimote::TimedSwitch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e4c8d9327409cef6066fa6c368032c1e";
  }

  static const char* value(const  ::wiimote::TimedSwitch_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe4c8d9327409cef6ULL;
  static const uint64_t static_value2 = 0x066fa6c368032c1eULL;
};

template<class ContainerAllocator>
struct DataType< ::wiimote::TimedSwitch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wiimote/TimedSwitch";
  }

  static const char* value(const  ::wiimote::TimedSwitch_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wiimote::TimedSwitch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# TimedSwitch allows sender to:\n\
#    o turn a switch on,\n\
#    o turn a switch off, and\n\
#    o repeat an on/off pattern forever or for a\n\
#          given number of times.\n\
# Fields (refer to definitions of constants in the definition body):\n\
#     o switch_mode:\n\
#         ON: turn on  (num_cycles and pulse_pattern fields are ignored)\n\
#        OFF: turn off (num_cycles and pulse_pattern fields are ignored)\n\
#  NO_CHANGE: leave LED in its current state\n\
#     REPEAT: repeat an on/off pattern for as long\n\
#             as is indicated in the num_cycles field. The\n\
#             pattern is defined in the pulse_pattern field.\n\
#\n\
#     o num_cycles:\n\
#          n>=0: run the pattern that is defined in pulse_pattern\n\
#                n times.\n\
#          n==FOREVER: run the pattern that is defined in pulse_pattern\n\
#                       until a new TimedSwitch message is sent.              \n\
#\n\
#     o pulse_pattern:\n\
#          A series of time durations in fractions of a second. The\n\
#          first number is the duration for having the switch on.\n\
#          The second number is the duration for which the switch\n\
#          is off. The third is an 'on' period again, etc.\n\
#          A pattern is terminated with the end of the array.\n\
#           \n\
#          Example: [1,1] specifies an on-off sequence of 1 second.               \n\
\n\
int8 ON        =  1\n\
int8 OFF       =  0\n\
int8 NO_CHANGE = -2\n\
int8 REPEAT    = -1\n\
int8 FOREVER   = -1\n\
\n\
int8 switch_mode\n\
int32 num_cycles\n\
float32[] pulse_pattern\n\
\n\
";
  }

  static const char* value(const  ::wiimote::TimedSwitch_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wiimote::TimedSwitch_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.switch_mode);
    stream.next(m.num_cycles);
    stream.next(m.pulse_pattern);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TimedSwitch_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wiimote::TimedSwitch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wiimote::TimedSwitch_<ContainerAllocator> & v) 
  {
    s << indent << "switch_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.switch_mode);
    s << indent << "num_cycles: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_cycles);
    s << indent << "pulse_pattern[]" << std::endl;
    for (size_t i = 0; i < v.pulse_pattern.size(); ++i)
    {
      s << indent << "  pulse_pattern[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pulse_pattern[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIIMOTE_MESSAGE_TIMEDSWITCH_H

