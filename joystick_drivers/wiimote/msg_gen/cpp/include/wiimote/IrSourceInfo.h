/* Auto-generated by genmsg_cpp for file /home/robot/Code/trunk/wiimote/msg/IrSourceInfo.msg */
#ifndef WIIMOTE_MESSAGE_IRSOURCEINFO_H
#define WIIMOTE_MESSAGE_IRSOURCEINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wiimote
{
template <class ContainerAllocator>
struct IrSourceInfo_ {
  typedef IrSourceInfo_<ContainerAllocator> Type;

  IrSourceInfo_()
  : x(0.0)
  , y(0.0)
  , ir_size(0)
  {
  }

  IrSourceInfo_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , ir_size(0)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef int64_t _ir_size_type;
  int64_t ir_size;


private:
  static const char* __s_getDataType_() { return "wiimote/IrSourceInfo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "95274ca88b9f008b99984b9a61d2772e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Sensor data pertaining to the Wiimote infrared camera.\n\
# This message contains data for one of the four infrared \n\
# light sources that the camera detects.\n\
#\n\
# Each light is specified with a 2D position and \n\
# a 'source magnitude' (ir_size). If the x dimension\n\
# is set to INVALID_FLOAT, then no light was detected for \n\
# the respective light. The Wiimote handles up to\n\
# four light sources, and the wiimote_node.py software\n\
# is written to that limit as well.\n\
#\n\
# I am unsure what the 'ir_size' values represent. \n\
# They are described as 'source magnitude' in some places. I\n\
# *assume* this is signal amplitude, but it's unclear. \n\
# Note that current lowest level cwiid driver does not \n\
# seem to pass the ir_size value to the cwiid Wiimote.c. \n\
# For now this size will therefore be set INVALID\n\
\n\
float64 x \n\
float64 y \n\
int64 ir_size\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, ir_size);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, ir_size);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(ir_size);
    return size;
  }

  typedef boost::shared_ptr< ::wiimote::IrSourceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wiimote::IrSourceInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IrSourceInfo
typedef  ::wiimote::IrSourceInfo_<std::allocator<void> > IrSourceInfo;

typedef boost::shared_ptr< ::wiimote::IrSourceInfo> IrSourceInfoPtr;
typedef boost::shared_ptr< ::wiimote::IrSourceInfo const> IrSourceInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wiimote::IrSourceInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wiimote::IrSourceInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wiimote

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wiimote::IrSourceInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wiimote::IrSourceInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wiimote::IrSourceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95274ca88b9f008b99984b9a61d2772e";
  }

  static const char* value(const  ::wiimote::IrSourceInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95274ca88b9f008bULL;
  static const uint64_t static_value2 = 0x99984b9a61d2772eULL;
};

template<class ContainerAllocator>
struct DataType< ::wiimote::IrSourceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wiimote/IrSourceInfo";
  }

  static const char* value(const  ::wiimote::IrSourceInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wiimote::IrSourceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Sensor data pertaining to the Wiimote infrared camera.\n\
# This message contains data for one of the four infrared \n\
# light sources that the camera detects.\n\
#\n\
# Each light is specified with a 2D position and \n\
# a 'source magnitude' (ir_size). If the x dimension\n\
# is set to INVALID_FLOAT, then no light was detected for \n\
# the respective light. The Wiimote handles up to\n\
# four light sources, and the wiimote_node.py software\n\
# is written to that limit as well.\n\
#\n\
# I am unsure what the 'ir_size' values represent. \n\
# They are described as 'source magnitude' in some places. I\n\
# *assume* this is signal amplitude, but it's unclear. \n\
# Note that current lowest level cwiid driver does not \n\
# seem to pass the ir_size value to the cwiid Wiimote.c. \n\
# For now this size will therefore be set INVALID\n\
\n\
float64 x \n\
float64 y \n\
int64 ir_size\n\
\n\
";
  }

  static const char* value(const  ::wiimote::IrSourceInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wiimote::IrSourceInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wiimote::IrSourceInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.ir_size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IrSourceInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wiimote::IrSourceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wiimote::IrSourceInfo_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "ir_size: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ir_size);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIIMOTE_MESSAGE_IRSOURCEINFO_H

