/* Auto-generated by genmsg_cpp for file /home/robot/Code/trunk/wiimote/msg/RumbleControl.msg */
#ifndef WIIMOTE_MESSAGE_RUMBLECONTROL_H
#define WIIMOTE_MESSAGE_RUMBLECONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "wiimote/TimedSwitch.h"

namespace wiimote
{
template <class ContainerAllocator>
struct RumbleControl_ {
  typedef RumbleControl_<ContainerAllocator> Type;

  RumbleControl_()
  : rumble()
  {
  }

  RumbleControl_(const ContainerAllocator& _alloc)
  : rumble(_alloc)
  {
  }

  typedef  ::wiimote::TimedSwitch_<ContainerAllocator>  _rumble_type;
   ::wiimote::TimedSwitch_<ContainerAllocator>  rumble;


private:
  static const char* __s_getDataType_() { return "wiimote/RumbleControl"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "264ec2f3013a512070cd67c42486214e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Message to control the Wiimote rumble (vibrator).\n\
# We simply use a TimedSwitch. So rumble can\n\
# be turned on (switch_mode == 1), off (switch_mode == 0),\n\
# or pulsed with a timing pattern (switch_mode == -1).\n\
# Number of times the cycle is repeated: num_cycles\n\
# (-1: repeat till next RumbleControl message). pulse_pattern\n\
# contains the time on/off pattern. (see also TimedSwitch.msg)\n\
\n\
TimedSwitch rumble\n\
\n\
\n\
================================================================================\n\
MSG: wiimote/TimedSwitch\n\
# TimedSwitch allows sender to:\n\
#    o turn a switch on,\n\
#    o turn a switch off, and\n\
#    o repeat an on/off pattern forever or for a\n\
#          given number of times.\n\
# Fields (refer to definitions of constants in the definition body):\n\
#     o switch_mode:\n\
#         ON: turn on  (num_cycles and pulse_pattern fields are ignored)\n\
#        OFF: turn off (num_cycles and pulse_pattern fields are ignored)\n\
#  NO_CHANGE: leave LED in its current state\n\
#     REPEAT: repeat an on/off pattern for as long\n\
#             as is indicated in the num_cycles field. The\n\
#             pattern is defined in the pulse_pattern field.\n\
#\n\
#     o num_cycles:\n\
#          n>=0: run the pattern that is defined in pulse_pattern\n\
#                n times.\n\
#          n==FOREVER: run the pattern that is defined in pulse_pattern\n\
#                       until a new TimedSwitch message is sent.              \n\
#\n\
#     o pulse_pattern:\n\
#          A series of time durations in fractions of a second. The\n\
#          first number is the duration for having the switch on.\n\
#          The second number is the duration for which the switch\n\
#          is off. The third is an 'on' period again, etc.\n\
#          A pattern is terminated with the end of the array.\n\
#           \n\
#          Example: [1,1] specifies an on-off sequence of 1 second.               \n\
\n\
int8 ON        =  1\n\
int8 OFF       =  0\n\
int8 NO_CHANGE = -2\n\
int8 REPEAT    = -1\n\
int8 FOREVER   = -1\n\
\n\
int8 switch_mode\n\
int32 num_cycles\n\
float32[] pulse_pattern\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, rumble);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, rumble);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(rumble);
    return size;
  }

  typedef boost::shared_ptr< ::wiimote::RumbleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wiimote::RumbleControl_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RumbleControl
typedef  ::wiimote::RumbleControl_<std::allocator<void> > RumbleControl;

typedef boost::shared_ptr< ::wiimote::RumbleControl> RumbleControlPtr;
typedef boost::shared_ptr< ::wiimote::RumbleControl const> RumbleControlConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wiimote::RumbleControl_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wiimote::RumbleControl_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wiimote

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wiimote::RumbleControl_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wiimote::RumbleControl_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wiimote::RumbleControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "264ec2f3013a512070cd67c42486214e";
  }

  static const char* value(const  ::wiimote::RumbleControl_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x264ec2f3013a5120ULL;
  static const uint64_t static_value2 = 0x70cd67c42486214eULL;
};

template<class ContainerAllocator>
struct DataType< ::wiimote::RumbleControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wiimote/RumbleControl";
  }

  static const char* value(const  ::wiimote::RumbleControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wiimote::RumbleControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message to control the Wiimote rumble (vibrator).\n\
# We simply use a TimedSwitch. So rumble can\n\
# be turned on (switch_mode == 1), off (switch_mode == 0),\n\
# or pulsed with a timing pattern (switch_mode == -1).\n\
# Number of times the cycle is repeated: num_cycles\n\
# (-1: repeat till next RumbleControl message). pulse_pattern\n\
# contains the time on/off pattern. (see also TimedSwitch.msg)\n\
\n\
TimedSwitch rumble\n\
\n\
\n\
================================================================================\n\
MSG: wiimote/TimedSwitch\n\
# TimedSwitch allows sender to:\n\
#    o turn a switch on,\n\
#    o turn a switch off, and\n\
#    o repeat an on/off pattern forever or for a\n\
#          given number of times.\n\
# Fields (refer to definitions of constants in the definition body):\n\
#     o switch_mode:\n\
#         ON: turn on  (num_cycles and pulse_pattern fields are ignored)\n\
#        OFF: turn off (num_cycles and pulse_pattern fields are ignored)\n\
#  NO_CHANGE: leave LED in its current state\n\
#     REPEAT: repeat an on/off pattern for as long\n\
#             as is indicated in the num_cycles field. The\n\
#             pattern is defined in the pulse_pattern field.\n\
#\n\
#     o num_cycles:\n\
#          n>=0: run the pattern that is defined in pulse_pattern\n\
#                n times.\n\
#          n==FOREVER: run the pattern that is defined in pulse_pattern\n\
#                       until a new TimedSwitch message is sent.              \n\
#\n\
#     o pulse_pattern:\n\
#          A series of time durations in fractions of a second. The\n\
#          first number is the duration for having the switch on.\n\
#          The second number is the duration for which the switch\n\
#          is off. The third is an 'on' period again, etc.\n\
#          A pattern is terminated with the end of the array.\n\
#           \n\
#          Example: [1,1] specifies an on-off sequence of 1 second.               \n\
\n\
int8 ON        =  1\n\
int8 OFF       =  0\n\
int8 NO_CHANGE = -2\n\
int8 REPEAT    = -1\n\
int8 FOREVER   = -1\n\
\n\
int8 switch_mode\n\
int32 num_cycles\n\
float32[] pulse_pattern\n\
\n\
";
  }

  static const char* value(const  ::wiimote::RumbleControl_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wiimote::RumbleControl_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rumble);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RumbleControl_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wiimote::RumbleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wiimote::RumbleControl_<ContainerAllocator> & v) 
  {
    s << indent << "rumble: ";
s << std::endl;
    Printer< ::wiimote::TimedSwitch_<ContainerAllocator> >::stream(s, indent + "  ", v.rumble);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIIMOTE_MESSAGE_RUMBLECONTROL_H

